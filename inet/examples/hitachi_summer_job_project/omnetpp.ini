[General]
sim-time-limit = 3s
**.displayInterfaceTables = true

[Config GeneralConfiguration]
#####################
# Clock Configuration

# Masterclock is ideal, rest are randomly drifting
*.MC.clock.typename = "IdealClock"
*.*.clock.typename = "SettableClock"
*.*.clock.oscillator.typename = "RandomDriftOscillator"
**.oscillator.changeInterval = 1ms
**.oscillator.driftRateChange = uniform(-10ppm, 10ppm)
**.oscillator.driftRateChangeUpperLimit = 100ppm
**.oscillator.driftRateChangeLowerLimit = -100ppm

# application traffic sources use the local clock of the network node
*.*.app[*].source.clockModule = "^.^.clock"

# periodic gates in all traffic shapers use the local clock of the network node
*.*.eth[*].macLayer.queue.transmissionGate[*].clockModule = "^.^.^.^.clock"

####################################
# Time Synchronization Configuration

# enable time synchronization in all network nodes
*.*.hasTimeSynchronization = true

# make sure sync and pdelay messages don't occur at the same time
*.*.gptp.syncInitialOffset = 5ms
*.*.gptp.syncInterval = 10ms
*.*.gptp.pdelayInitialOffset = 0ms
*.*.gptp.pdelayInterval = 1s

# time synchronization starts from the master clock
*.MC.gptp.masterPorts = ["eth0"]

# all Ethernet switches act as a gPTP bridge
*.switch1.gptp.slavePort = "eth0"
*.switch1.gptp.masterPorts = ["eth1", "eth2", "eth3", "eth4", "eth5", "eth6", "eth7", "eth8","eth9"]
*.switch2.gptp.slavePort = "eth7"
*.switch2.gptp.masterPorts = ["eth0","eth1", "eth2", "eth3", "eth4", "eth5", "eth6"]


###########################
# Traffic flows configuration

# The mac header checker in end stations denies multicast packets,
# therefore it is set to promiscuous
Ethernet.*.ethernet.macHeaderChecker.promiscuous = true

# disable local multicast loop
**.udp.defaultMulticastLoop = false

# node1-2 applications
*.node{1..2}.numApps = 3
*.node{1..2}.app[0].typename = "UdpSourceApp"
*.node{1..2}.app[0].display-name = "SV"
*.node{1..2}.app[0].source.packetNameFormat = "%M->MultiCast to N13, N14-%c"
*.node{1..2}.app[0].source.packetLength = 72B # 72+54 = 126B
*.node{1..2}.app[0].source.productionInterval = 250us # ~4.032Mbps (126*8 bits / 0.00025 seconds = 4 032 000)
*.node{1..2}.app[0].io.destAddress = "224.0.0.42" # Source: N1, N2, Destination: N13, N14 
*.node1.app[0].io.destPort = 1001
*.node2.app[0].io.destPort = 1002
*.node{1..2}.app[1..2].typename = "UdpSinkApp"
*.node{1..2}.app[1].io.multicastAddresses = ["224.0.0.45"] # Source: N13, Destination: N1, N2, N5, N6
*.node{1..2}.app[1].display-name = "Node 13"
*.node{1..2}.app[1].io.localPort = 1013
*.node{1..2}.app[2].io.multicastAddresses = ["224.0.0.46"] # Source: N14, Destination: N1, N2, N11, N12
*.node{1..2}.app[2].display-name = "Node 14"
*.node{1..2}.app[2].io.localPort = 1014


# node3-4 applications
*.node{3..4}.numApps = 1
*.node{3..4}.app[0].typename = "UdpSourceApp"
*.node{3..4}.app[0].display-name = "SV"
*.node{3..4}.app[0].source.packetNameFormat = "%M->Unicast to N13-%c"
*.node{3..4}.app[0].source.packetLength = 72B # 72+54 = 126B
*.node{3..4}.app[0].source.productionInterval = 250us # ~4.032Mbps (126*8 bits / 0.00025 seconds = 4 032 000)
*.node{3..4}.app[0].io.destAddress = "node13_line1_IED"
*.node3.app[0].io.destPort = 1003
*.node4.app[0].io.destPort = 1004


# node5-8 applications
*.node{5..6}.numApps = 3
*.node{7..8}.numApps = 1
*.node{5..8}.app[0].typename = "UdpSourceApp"
*.node{5..8}.app[0].display-name = "SV"
*.node{5..8}.app[0].source.packetNameFormat = "%M->MultiCast to N13, N14, N15-%c"
*.node{5..8}.app[0].source.packetLength = 72B # 72+54 = 126B
*.node{5..8}.app[0].source.productionInterval = 250us # ~4.032Mbps (126*8 bits / 0.00025 seconds = 4 032 000)
*.node{5..8}.app[0].io.destAddress = "224.0.0.43" # Source N5, N6, N7, N8, Destination: N13, N14, N15
*.node5.app[0].io.destPort = 1005
*.node6.app[0].io.destPort = 1006
*.node7.app[0].io.destPort = 1007
*.node8.app[0].io.destPort = 1008

*.node{5..6}.app[1..2].typename = "UdpSinkApp"
*.node{5..6}.app[1].io.multicastAddresses = ["224.0.0.45"] # Source: N13, Destination: N1, N2, N5, N6
*.node{5..6}.app[1].display-name = "Node 13"
*.node{5..6}.app[1].io.localPort = 1013
*.node{5..6}.app[2].io.multicastAddresses = ["224.0.0.47"] # Source N15, Destination: N5, N6, N11, N12
*.node{5..6}.app[2].display-name = "Node 15"
*.node{5..6}.app[2].io.localPort = 1015

# node9 application
*.node{9..10}.numApps = 1
*.node{9..10}.app[0].typename = "UdpSourceApp"
*.node{9..10}.app[0].display-name = "SV"
*.node{9..10}.app[0].source.packetNameFormat = "%M->Unicast to N15-%c"
*.node{9..10}.app[0].source.packetLength = 72B # 72+54 = 126B
*.node{9..10}.app[0].source.productionInterval = 250us # ~4.032Mbps (126*8 bits / 0.00025 seconds = 4 032 000)
*.node{9..10}.app[0].io.destAddress = "node15_line2_IED"
*.node9.app[0].io.destPort = 1009
*.node10.app[0].io.destPort = 1010

# node11-12 applications
*.node{11..12}.numApps = 3
*.node{11..12}.app[0].typename = "UdpSourceApp"
*.node{11..12}.app[0].display-name = "SV"
*.node{11..12}.app[0].source.packetNameFormat = "%M->MultiCast to N14, N15:CDT-%c"
*.node{11..12}.app[0].source.packetLength = 72B # 72+54 = 126B
*.node{11..12}.app[0].source.productionInterval = 250us # ~4.032Mbps (126*8 bits / 0.00025 seconds = 4 032 000)
*.node{11..12}.app[0].io.destAddress = "224.0.0.44" # Source: N11, N12, Destination: N14, N15
*.node11.app[0].io.destPort = 1011
*.node12.app[0].io.destPort = 1012

*.node{11..12}.app[1..2].typename = "UdpSinkApp"
*.node{11..12}.app[1].io.multicastAddresses = ["224.0.0.46"] # Source: N14, Destination: N1, N2, N11, N12
*.node{11..12}.app[1].display-name = "Node 14"
*.node{11..12}.app[1].io.localPort = 1014
*.node{11..12}.app[2].io.multicastAddresses = ["224.0.0.47"] # Source N15, Destination: N5, N6, N11, N12
*.node{11..12}.app[2].display-name = "Node 15"
*.node{11..12}.app[2].io.localPort = 1015


# node13_line1_IED (node13) applications
*.node13_line1_IED.numApps = 11
*.node13_line1_IED.app[0..7].typename = "UdpSinkApp"
*.node13_line1_IED.app[0..1].io.multicastAddresses = ["224.0.0.42"] # Source: N1, N2, Destination: N13, N14 
*.node13_line1_IED.app[4..7].io.multicastAddresses = ["224.0.0.43"] # Source N5, N6, N7, N8, Destination: N13, N14, N15
*.node13_line1_IED.app[0].display-name = "Node 1"
*.node13_line1_IED.app[0].io.localPort = 1001
*.node13_line1_IED.app[1].display-name = "Node 2"
*.node13_line1_IED.app[1].io.localPort = 1002
*.node13_line1_IED.app[2].display-name = "Node 3"
*.node13_line1_IED.app[2].io.localPort = 1003
*.node13_line1_IED.app[3].display-name = "Node 4"
*.node13_line1_IED.app[3].io.localPort = 1004
*.node13_line1_IED.app[4].display-name = "Node 5"
*.node13_line1_IED.app[4].io.localPort = 1005
*.node13_line1_IED.app[5].display-name = "Node 6"
*.node13_line1_IED.app[5].io.localPort = 1006
*.node13_line1_IED.app[6].display-name = "Node 7"
*.node13_line1_IED.app[6].io.localPort = 1007
*.node13_line1_IED.app[7].display-name = "Node 8"
*.node13_line1_IED.app[7].io.localPort = 1008

# TRIP Messages node13
*.node13_line1_IED.app[8].typename = "UdpSourceApp"
*.node13_line1_IED.app[8].source.packetNameFormat = "%M->TRIP S: N13, D: N1, N2, N5, N6 -%c"
*.node13_line1_IED.app[8].source.packetLength = 96B # 96+54 = 150B 
*.node13_line1_IED.app[8].source.productionInterval = uniform(300ms, 600ms)
*.node13_line1_IED.app[8].io.destAddress = "224.0.0.45" # Source: N13, Destination: N1, N2, N5, N6
*.node13_line1_IED.app[8].io.destPort = 1013

# MMS Traffic node13
*.node13_line1_IED.app[9].typename = "TcpClientApp"
*.node13_line1_IED.app[9].source.packetNameFormat = "%M->MMS Traffic. S: N13, D: N14 -%c"
*.node13_line1_IED.app[9].source.packetLength = 84B # Packet size is 150 B
*.node13_line1_IED.app[9].source.productionInterval = uniform(50us-10us, 50us+10us) #~48Mbps datarate ---- 150 * 8 / 0.000025 = 48 000 000
*.node13_line1_IED.app[9].io.connectAddress = "node14_BFP_IED" 
*.node13_line1_IED.app[9].io.connectPort = 1113
*.node13_line1_IED.app[10].typename = "TcpSinkApp"
*.node13_line1_IED.app[10].display-name = "Node 15"
*.node13_line1_IED.app[10].localPort = 1115

# node_14_BFP_IED applications
*.node14_BFP_IED.numApps = 11
*.node14_BFP_IED.app[0..7].typename = "UdpSinkApp"
*.node14_BFP_IED.app[0..1].io.multicastAddresses = ["224.0.0.42"] # Source: N1, N2, Destination: N13, N14 
*.node14_BFP_IED.app[2..5].io.multicastAddresses = ["224.0.0.43"] # Source N5, N6, N7, N8, Destination: N13, N14, N15
*.node14_BFP_IED.app[6..7].io.multicastAddresses = ["224.0.0.44"] # Source: N11, N12, Destination: N14, N15
*.node14_BFP_IED.app[0].display-name = "Node 1"
*.node14_BFP_IED.app[0].io.localPort = 1001
*.node14_BFP_IED.app[1].display-name = "Node 2"
*.node14_BFP_IED.app[1].io.localPort = 1002
*.node14_BFP_IED.app[2].display-name = "Node 5"
*.node14_BFP_IED.app[2].io.localPort = 1005
*.node14_BFP_IED.app[3].display-name = "Node 6"
*.node14_BFP_IED.app[3].io.localPort = 1006
*.node14_BFP_IED.app[4].display-name = "Node 7"
*.node14_BFP_IED.app[4].io.localPort = 1007
*.node14_BFP_IED.app[5].display-name = "Node 8"
*.node14_BFP_IED.app[5].io.localPort = 1008
*.node14_BFP_IED.app[6].display-name = "Node 11"
*.node14_BFP_IED.app[6].io.localPort = 1011
*.node14_BFP_IED.app[7].display-name = "Node 12"
*.node14_BFP_IED.app[7].io.localPort = 1012
*.node14_BFP_IED.app[8].typename = "TcpSinkApp"
*.node14_BFP_IED.app[8].display-name = "Node 13"
*.node14_BFP_IED.app[8].localPort = 1113

# TRIP Message node14
*.node14_BFP_IED.app[9].typename = "UdpSourceApp"
*.node14_BFP_IED.app[9].source.packetNameFormat = "%M->TRIP S:N14, D: N1, N2, N11, N12 -%c"
*.node14_BFP_IED.app[9].source.packetLength = 96B # 96+54 = 150B
*.node14_BFP_IED.app[9].source.productionInterval = uniform(300ms, 600ms)
*.node14_BFP_IED.app[9].io.destAddress = "224.0.0.46" # Source: N14, Destination: N1,N2,N11,N12
*.node14_BFP_IED.app[9].io.destPort = 1014

# MMS Traffic node14
*.node14_BFP_IED.app[10].typename = "TcpClientApp"
*.node14_BFP_IED.app[10].source.packetNameFormat = "%M->MMS Traffic. S: N14, D: N15 -%c"
*.node14_BFP_IED.app[10].source.packetLength = 84B # Packet size is 150 B
*.node14_BFP_IED.app[10].source.productionInterval = uniform(50us-10us, 50us+10us)
*.node14_BFP_IED.app[10].io.connectAddress = "node15_line2_IED" 
*.node14_BFP_IED.app[10].io.connectPort = 1114

# node15_line2_IED applications
*.node15_line2_IED.numApps = 11
*.node15_line2_IED.app[0..7].typename = "UdpSinkApp"
*.node15_line2_IED.app[0..3].io.multicastAddresses = ["224.0.0.43"] # Source N5, N6, N7, N8, Destination: N13, N14, N15
*.node15_line2_IED.app[6..7].io.multicastAddresses = ["224.0.0.44"] # Source: N11, N12, Destination: N14, N15
*.node15_line2_IED.app[0].display-name = "Node 5"
*.node15_line2_IED.app[0].io.localPort = 1005
*.node15_line2_IED.app[1].display-name = "Node 6"
*.node15_line2_IED.app[1].io.localPort = 1006
*.node15_line2_IED.app[2].display-name = "Node 7"
*.node15_line2_IED.app[2].io.localPort = 1007
*.node15_line2_IED.app[3].display-name = "Node 8"
*.node15_line2_IED.app[3].io.localPort = 1008
*.node15_line2_IED.app[4].display-name = "Node 9"
*.node15_line2_IED.app[4].io.localPort = 1009
*.node15_line2_IED.app[5].display-name = "Node 10"
*.node15_line2_IED.app[5].io.localPort = 1010
*.node15_line2_IED.app[6].display-name = "Node 11"
*.node15_line2_IED.app[6].io.localPort = 1011
*.node15_line2_IED.app[7].display-name = "Node 12"
*.node15_line2_IED.app[7].io.localPort = 1012

# TRIP Message node15
*.node15_line2_IED.app[8].typename = "UdpSourceApp"
*.node15_line2_IED.app[8].source.packetNameFormat = "%M->TRIP, S: N15, D: N5, N6, N11, N12 -%c"
*.node15_line2_IED.app[8].source.packetLength = 96B # 96+54 = 150B
*.node15_line2_IED.app[8].source.productionInterval = uniform(300ms, 600ms)
*.node15_line2_IED.app[8].io.destAddress = "224.0.0.47" # Source N15, Destination: N5, N6, N11, N12
*.node15_line2_IED.app[8].io.destPort = 1015

# MMS Traffic node15
*.node15_line2_IED.app[9].typename = "TcpSinkApp"
*.node15_line2_IED.app[9].display-name = "Node 14"
*.node15_line2_IED.app[9].localPort = 1114
*.node15_line2_IED.app[10].typename = "TcpClientApp"
*.node15_line2_IED.app[10].source.packetNameFormat = "%M->MMS Traffic. S: N15, D: N13 -%c"
*.node15_line2_IED.app[10].source.packetLength = 84B # Packet size is 150 B
*.node15_line2_IED.app[10].source.productionInterval = uniform(50us-10us, 50us+10us)
*.node15_line2_IED.app[10].io.connectAddress = "node13_line1_IED" 
*.node15_line2_IED.app[10].io.connectPort = 1115


#####################################
# Cut-through Switching Configuration

# enable cut-through switching
#*.*.hasCutthroughSwitching = true


[Config EthernetUnderProvisioned]
network = Ethernet
extends = GeneralConfiguration
description = "Under provisioned Ethernet"
###############################
# Common Ethernet Configuration
*.*.eth[*].bitrate = 100Mbps
#################################
# Queue configurations

# Interface queues in all devices = 32KB
*.*.eth[*].macLayer.queue.dataCapacity = 32000B
*.*.eth[*].macLayer.queue.dropperClass = "inet::queueing::PacketAtCollectionEndDropper"

[Config EthernetOverprovisioned]
network = Ethernet
extends = GeneralConfiguration
###############################
# Common Ethernet Configuration
*.*.eth[*].bitrate = 1Gbps
#################################
# Queue configurations

# Interface queues in all devices = 32KB
*.*.eth[*].macLayer.queue.dataCapacity = 32000B
*.*.eth[*].macLayer.queue.dropperClass = "inet::queueing::PacketAtCollectionEndDropper"

[Config TSNwithTAS]
network = Ethernet
extends = GeneralConfiguration
###############################
# Common Ethernet Configuration
*.*.eth[*].bitrate = 100Mbps

# Manual TAS configuration
*.switch*.hasEgressTrafficShaping = true
*.switch*.eth[*].macLayer.queue.numTrafficClasses = 3
*.*.eth[*].macLayer.queue.classifier.typename = "ContentBasedClassifier"
*.switch*.eth[*].macLayer.queue.queue[*].typename = "DropTailQueue"
*.switch*.eth[*].macLayer.queue.queue.dataCapacity = 32000B

*.switch*.eth[*].macLayer.queue.classifier.packetFilters = [expr(has(udp)),"Gptp*",expr(has(tcp))] #
*.switch*.eth[*].macLayer.queue.transmissionGate[0].initiallyOpen = true
*.switch*.eth[*].macLayer.queue.transmissionGate[0].durations = [100us,150us]
*.switch*.eth[*].macLayer.queue.transmissionGate[0].clockModule = "^.^.^.^.clock"
*.switch*.eth[*].macLayer.queue.transmissionGate[1].initiallyOpen = true
*.switch*.eth[*].macLayer.queue.transmissionGate[1].durations = [50us,200us]
#Offset: "specifies where the period starts in the list of gate state change durations; where it is in the period at the start"
*.switch*.eth[*].macLayer.queue.transmissionGate[1].offset = 150us
*.switch*.eth[*].macLayer.queue.transmissionGate[1].clockModule = "^.^.^.^.clock"
*.switch*.eth[*].macLayer.queue.transmissionGate[2].initiallyOpen = true
*.switch*.eth[*].macLayer.queue.transmissionGate[2].offset = 100us
*.switch*.eth[*].macLayer.queue.transmissionGate[2].durations = [100us,150us]
*.switch*.eth[*].macLayer.queue.transmissionGate[2].clockModule = "^.^.^.^.clock"

#Display gates
**.displayGateSchedules = true
**.gateFilter = "**.eth[1].**"
**.gateScheduleVisualizer.height = 16
**.gateScheduleVisualizer.placementHint = "top"

[Config TSNwithCBS]
network = CreditBased
###############################
# Common Ethernet Configuration
*.*.eth[*].bitrate = 100Mbps

#####################
# Clock Configuration

# Masterclock is ideal, rest are randomly drifting
*.MC.clock.typename = "IdealClock"
*.*.clock.typename = "SettableClock"
*.*.clock.oscillator.typename = "RandomDriftOscillator"
**.oscillator.changeInterval = 1ms
**.oscillator.driftRateChange = uniform(-10ppm, 10ppm)
**.oscillator.driftRateChangeUpperLimit = 100ppm
**.oscillator.driftRateChangeLowerLimit = -100ppm

# application traffic sources use the local clock of the network node
*.*.app[*].source.clockModule = "^.^.clock"

# periodic gates in all traffic shapers use the local clock of the network node
*.*.eth[*].macLayer.queue.transmissionGate[*].clockModule = "^.^.^.^.clock"

####################################
# Time Synchronization Configuration

# enable time synchronization in all network nodes
*.*.hasTimeSynchronization = true

# make sure sync and pdelay messages don't occur at the same time
*.*.gptp.syncInitialOffset = 5ms
*.*.gptp.syncInterval = 10ms
*.*.gptp.pdelayInitialOffset = 0ms
*.*.gptp.pdelayInterval = 1s

# time synchronization starts from the master clock
*.MC.gptp.masterPorts = ["eth0"]

# all Ethernet switches act as a gPTP bridge
*.switch1.gptp.slavePort = "eth0"
*.switch1.gptp.masterPorts = ["eth1", "eth2", "eth3"]


###########################
# Traffic flows configuration

# The mac header checker in end stations denies multicast packets,
# therefore it is set to promiscuous
**.ethernet.macHeaderChecker.promiscuous = true

# disable local multicast loop
**.udp.defaultMulticastLoop = false

# node1 applications
*.node1.numApps = 1
*.node1.app[0].typename = "UdpSourceApp"
*.node1.app[0].display-name = "SV"
*.node1.app[0].source.packetNameFormat = "%M->MultiCast to N13, N14-%c"
*.node1.app[0].source.packetLength = 72B # 72+54 = 126B
*.node1.app[0].source.productionInterval = 250us # ~4.032Mbps (126*8 bits / 0.00025 seconds = 4 032 000)
*.node1.app[0].io.destAddress = "224.0.0.42" # Source: N1, N2, Destination: N13, N14 
*.node1.app[0].io.destPort = 1001


# node13_line1_IED (node13) applications
*.node13_line1_IED.numApps = 2
*.node13_line1_IED.app[0].typename = "UdpSinkApp"
*.node13_line1_IED.app[0].io.multicastAddresses = ["224.0.0.42"] # Source: N1, N2, Destination: N13, N14 
*.node13_line1_IED.app[0].display-name = "Node 1"
*.node13_line1_IED.app[0].io.localPort = 1001

# MMS Traffic node13
*.node13_line1_IED.app[1].typename = "TcpClientApp"
*.node13_line1_IED.app[1].source.packetNameFormat = "%M->MMS Traffic. S: N13, D: N14 -%c"
*.node13_line1_IED.app[1].source.packetLength = 84B # Packet size is 150 B
*.node13_line1_IED.app[1].source.productionInterval = uniform(10us-10us, 10us+10us) #~48Mbps datarate ---- 150 * 8 / 0.000025 = 48 000 000
*.node13_line1_IED.app[1].io.connectAddress = "node14_BFP_IED" 
*.node13_line1_IED.app[1].io.connectPort = 1113

# node_14_BFP_IED applications
*.node14_BFP_IED.numApps = 2
*.node14_BFP_IED.app[0].typename = "UdpSinkApp"
*.node14_BFP_IED.app[0].io.multicastAddresses = ["224.0.0.42"] # Source: N1, N2, Destination: N13, N14 
*.node14_BFP_IED.app[0].display-name = "Node 1"
*.node14_BFP_IED.app[0].io.localPort = 1001

*.node14_BFP_IED.app[1].typename = "TcpSinkApp"
*.node14_BFP_IED.app[1].display-name = "Node 13"
*.node14_BFP_IED.app[1].localPort = 1113


###############################
# Traffic Shaping Configuration

# enable outgoing streams
*.node*.hasOutgoingStreams = true

# client stream identification
*.node1.bridging.streamIdentifier.identifier.mapping = [{stream: "SV", packetFilter: expr(has(udp))}]
*.node13.bridging.streamIdentifier.identifier.mapping = [{stream: "MMS", packetFilter: expr(has(tcp))}]

# client stream encoding
*.node1.bridging.streamCoder.encoder.mapping = [{stream: "SV", pcp:6}]
*.node13.bridging.streamCoder.encoder.mapping = [{stream: "MMS", pcp:2}]
# enable egress traffic shaping
#*.switch*.hasEgressTrafficShaping = true

# disable forwarding IEEE 802.1Q C-Tag
#*.switch*.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]

# credit based traffic shaping
#*.switch*.eth[*].macLayer.queue.numTrafficClasses = 2
#*.switch*.eth[*].macLayer.queue.*[0].display-name = "MMS"
#*.switch*.eth[*].macLayer.queue.*[1].display-name = "SV"
#*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[*].typename = "Ieee8021qCreditBasedShaper"
#*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[0].idleSlope = 40.64Mbps # Channel data rate
#*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[1].idleSlope = 20.32Mbps # Channel data rate

#*.node1.bridging.streamIdentifier.identifier.mapping = [{stream: "SV", packetFilter: expr(has(udp))},
#														{stream: "GPTP", packetFilter: expr(has(gptp))}]
#*.node14.bridging.streamIdentifier.identifier.mapping = [{stream: "GPTP", packetFilter: expr(has(gptp))}]
#*.node13.bridging.streamIdentifier.identifier.mapping = [{stream: "MMS", packetFilter: expr(has(tcp))},
#														{stream: "GPTP", packetFilter: expr(has(gptp))}]

# client stream encoding
#*.node1.bridging.streamCoder.encoder.mapping = [{stream: "SV", pcp:6},
#												{stream: "GPTP", pcp:4}]
#*.node13.bridging.streamCoder.encoder.mapping = [{stream: "MMS", pcp:2},
#												{stream: "GPTP", pcp:4}]
#*.node14.bridging.streamCoder.encoder.mapping = [{stream: "GPTP", pcp:4}]
# enable egress traffic shaping
#*.switch*.hasEgressTrafficShaping = true
#
# disable forwarding IEEE 802.1Q C-Tag
#*.switch*.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]
#
# credit based traffic shaping
#*.switch*.eth[*].macLayer.queue.numTrafficClasses = 3
#*.switch*.eth[*].macLayer.queue.*[0].display-name = "MMS"
#*.switch*.eth[*].macLayer.queue.*[1].display-name = "SV"
#*.switch*.eth[*].macLayer.queue.*[2].display-name = "GPTP"
#*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[*].typename = "Ieee8021qCreditBasedShaper"
#*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[0].idleSlope = 40.64Mbps # Channel data rate
#*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[1].idleSlope = 20.32Mbps # Channel data rate
#*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[2].idleSlope = 20.32Mbps # Channel data rate

[Config EthernetSyncInfo]
# Provides visuals for synchronization. Used for debugging purposes
description = "Clock synchronization info for debugging"
extends = EthernetUnderProvisioned

*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
#*.visualizer.infoVisualizer[*].displayInfos = true

# Set all reference clocks to master clock so the time difference can be visualized
**.referenceClock = "MC.clock"

# Synchronization difference visualization
*.visualizer.numInfoVisualizers = 3
*.visualizer.infoVisualizer[0].modules = "*.MC.clock"
*.visualizer.infoVisualizer[1].modules = "*.switch*.clock"
*.visualizer.infoVisualizer[2].modules = "*.node*.clock"
*.visualizer.infoVisualizer[*].placementHint = "left"
*.MC.clock.displayStringTextFormat = "time: %T"
Ethernet.switch*.clock.displayStringTextFormat = "diff: %d"
Ethernet.node*.clock.displayStringTextFormat = "diff: %d"
