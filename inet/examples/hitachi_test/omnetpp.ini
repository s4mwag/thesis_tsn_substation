[General]
sim-time-limit = 10s

# all Ethernet interfaces have 100 Mbps speed

[Config TimeSynchronization]
# enable time synchronization in all network nodes
*.*.hasTimeSynchronization = true

# IF YOU WANT TO SIMULATE CLOCK DRIFT, MODIFY THESE PARAMETERS
*.gPTPclock.clock.typename = "IdealClock"
*.*.clock.typename = "SettableClock"
#*.MU*.clock.typename = "SettableClock"
#*.switch*.clock.typename = "SettableClock"

*.*.clock.oscillator.typename = "RandomDriftOscillator"
**.oscillator.changeInterval = 12.5ms
**.oscillator.driftRate = uniform(-100ppm, 100ppm)
**.oscillator.driftRateChange = uniform(-1ppm, 1ppm)
**.oscillator.driftRateChangeUpperLimit = 100ppm
**.oscillator.driftRateChangeLowerLimit = -100ppm

#source applications and periodic gates use local clock
*.*.app[*].source.clockModule = "^.^.clock"
*.*.eth[*].macLayer.queue.transmissionGate[*].clockModule = "^.^.^.^.clock"
# make sure sync and pdelay messages don't occur at the same time
*.*.gptp.syncInitialOffset = 5ms
*.*.gptp.syncInterval = 31.25ms
*.*.gptp.pdelayInitialOffset = 0s
*.*.gptp.pdelayInterval = 1s


[Config gPTP_Example]
# Provides visuals for synchronization. Used for debugging purposes
description = "Clock synchronization info for debugging"
extends = ThreeBaysOverProvisioned
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
#*.visualizer.infoVisualizer[*].displayInfos = true

# Set all reference clocks to master clock so the time difference can be visualized
**.referenceClock = "gPTPclock.clock"

# Synchronization difference visualization
*.visualizer.numInfoVisualizers = 4
*.visualizer.infoVisualizer[0].modules = "*.gPTPclock.clock"
*.visualizer.infoVisualizer[1].modules = "*.switch*.clock"
*.visualizer.infoVisualizer[2].modules = "*.IED*.clock"
*.visualizer.infoVisualizer[3].modules = "*.MU*.clock"
*.visualizer.infoVisualizer[*].placementHint = "left"
*.gPTPclock.clock.displayStringTextFormat = "time: %T"
*.switch*.clock.displayStringTextFormat = "diff: %d"
*.IED*.clock.displayStringTextFormat = "diff: %d"
*.MU*.clock.displayStringTextFormat = "diff: %d"

[Config ThreeBays]
extends = TimeSynchronization
*.switch*.eth[*].macLayer.queue.queue[*].typename = "DropTailQueue"
*.switch*.eth[*].macLayer.queue.queue.dataCapacity = 32000B

#GPTP CLOCK CONFIGURATION
*.gPTPclock.gptp.masterPorts = ["eth0"]
*.switch_1.gptp.slavePort = "eth0"
*.switch_2.gptp.slavePort = "eth5"
*.switch_3.gptp.slavePort = "eth5"

*.switch_1.gptp.masterPorts = ["eth1", "eth2", "eth3","eth4","eth5","eth6","eth7"]
*.switch_2.gptp.masterPorts = ["eth0","eth1", "eth2", "eth3","eth4"]
*.switch_3.gptp.masterPorts = ["eth0","eth1", "eth2", "eth3","eth4"]

**.hasGlobalArp = true

#IED_1_A MMS TO IED_1_B 
# Will send messages from a list generated in sendscript.txt, 150 Total Bytes per MMS packet
# Currently sends 8333 packets in 10 seconds which is ~1Mbps
# 8333 packets / 10 s * 150 B * 8 = 999 960 bps
**.IED_{1..3}_A.numApps = 4
**.IED_{1..3}_A.app[0].typename = "TcpSessionApp"
**.IED_{1..3}_A.app[0].display-name = "mms"
**.IED_{1..3}_A.app[0].tClose = -1s
**.IED_{1..3}_A.app[0].active = true
**.IED_{1..3}_A.app[0].connectPort = 1112
**.IED_{1..3}_A.app[0].tOpen = 0s
**.IED_{1..3}_A.app[0].tSend = 0s
**.IED_{1..3}_A.app[0].sendBytes = 0B

**.IED_1_A.app[0].connectAddress = "IED_1_B" 
**.IED_1_A.app[0].sendScript = "sendscript_1.txt"
**.IED_2_A.app[0].connectAddress = "IED_2_B" 
**.IED_2_A.app[0].sendScript = "sendscript_2.txt"
**.IED_3_A.app[0].connectAddress = "IED_3_B" 
**.IED_3_A.app[0].sendScript = "sendscript_3.txt"

**.IED_{1..3}_A.app[1].typename = "EthernetSourceApp"
**.IED_{1..3}_A.app[1].display-name = "goose_1a"
**.IED_{1..3}_A.app[1].io.interface = "eth0"
**.IED_{1..3}_A.app[1].source.packetLength = 134B #160B total
**.IED_{1..3}_A.app[1].source.productionInterval = 1s
**.IED_{1..3}_A.app[1].source.useGoose = true 
**.IED_{1..3}_A.app[1].source.numberOfGooseEventsPerSec = 200

**.IED_1_A.app[1].io.remoteAddress = "01:0C:CD:04:00:50"
**.IED_2_A.app[1].io.remoteAddress = "01:0C:CD:04:00:51"
**.IED_3_A.app[1].io.remoteAddress = "01:0C:CD:04:00:52"

**.IED_{1..3}_A.app[2].typename = "EthernetSinkApp"
**.IED_{1..3}_A.app[2].display-name = "SV Sink #1"
**.IED_{1..3}_A.app[2].io.interface = "eth0"
**.IED_1_A.app[2].io.localAddress = "01:0C:CD:04:00:10"
**.IED_2_A.app[2].io.localAddress = "01:0C:CD:04:00:20"
**.IED_3_A.app[2].io.localAddress = "01:0C:CD:04:00:30"

**.IED_{1..3}_A.app[3].typename = "TcpSessionApp"
**.IED_{1..3}_A.app[3].display-name = "IED LOG"
**.IED_{1..3}_A.app[3].tClose = -1s
**.IED_{1..3}_A.app[3].active = true
**.IED_{1..3}_A.app[3].connectAddress = "log_server" 
**.IED_{1..3}_A.app[3].connectPort = 1150
**.IED_{1..3}_A.app[3].tOpen = 0s
**.IED_{1..3}_A.app[3].tSend = 0s
**.IED_{1..3}_A.app[3].sendBytes = 0B

**.IED_1_A.app[3].sendScript = "sendscriptLOG_1.txt"
**.IED_2_A.app[3].sendScript = "sendscriptLOG_2.txt"
**.IED_3_A.app[3].sendScript = "sendscriptLOG_3.txt"

**.IED_{1..3}_B.numApps = 5
**.IED_{1..3}_B.app[0].typename = "EthernetSourceApp"
**.IED_{1..3}_B.app[0].display-name = "goose_1a"
**.IED_{1..3}_B.app[0].io.interface = "eth0"
**.IED_{1..3}_B.app[0].source.packetLength = 134B #160B total
**.IED_{1..3}_B.app[0].source.productionInterval = 1s
**.IED_{1..3}_B.app[0].source.useGoose = true 
**.IED_{1..3}_B.app[0].source.numberOfGooseEventsPerSec = 200

**.IED_1_B.app[0].io.remoteAddress = "01:0C:CD:04:00:50"
**.IED_2_B.app[0].io.remoteAddress = "01:0C:CD:04:00:51"
**.IED_3_B.app[0].io.remoteAddress = "01:0C:CD:04:00:52"

**.IED_{1..3}_B.app[1].typename = "EthernetSourceApp"
**.IED_{1..3}_B.app[1].display-name = "goose_1b"
**.IED_{1..3}_B.app[1].io.interface = "eth0"
**.IED_{1..3}_B.app[1].source.packetLength = 134B #160B total
**.IED_{1..3}_B.app[1].source.productionInterval = 1s
**.IED_{1..3}_B.app[1].source.useGoose = true 
**.IED_{1..3}_B.app[1].source.numberOfGooseEventsPerSec = 200

**.IED_1_B.app[1].io.remoteAddress = "01:0C:CD:04:00:60"
**.IED_2_B.app[1].io.remoteAddress = "01:0C:CD:04:00:61"
**.IED_3_B.app[1].io.remoteAddress = "01:0C:CD:04:00:62"

**.IED_{1..3}_B.app[2].typename = "EthernetSinkApp"
**.IED_{1..3}_B.app[2].display-name = "SV Sink"
**.IED_{1..3}_B.app[2].io.interface = "eth0"
**.IED_1_B.app[2].io.localAddress = "01:0C:CD:04:00:10"
**.IED_2_B.app[2].io.localAddress = "01:0C:CD:04:00:20"
**.IED_3_B.app[2].io.localAddress = "01:0C:CD:04:00:30"

**.IED_{1..3}_B.app[3].typename = "TcpSinkApp"
**.IED_{1..3}_B.app[3].display-name = "MMS Sink"
**.IED_{1..3}_B.app[3].localPort = 1112

**.IED_{1..3}_B.app[4].typename = "TcpSessionApp"
**.IED_{1..3}_B.app[4].display-name = "LOG"
**.IED_{1..3}_B.app[4].tClose = -1s
**.IED_{1..3}_B.app[4].active = true
**.IED_{1..3}_B.app[4].connectAddress = "log_server" 
**.IED_{1..3}_B.app[4].connectPort = 1150
**.IED_{1..3}_B.app[4].tOpen = 0s
**.IED_{1..3}_B.app[4].tSend = 0s
**.IED_{1..3}_B.app[4].sendBytes = 0B
**.IED_1_B.app[4].sendScript = "sendscriptLOG_4.txt"
**.IED_2_B.app[4].sendScript = "sendscriptLOG_5.txt"
**.IED_3_B.app[4].sendScript = "sendscriptLOG_6.txt"

**.IED_{1..3}_C.numApps = 3
**.IED_{1..3}_C.app[0].typename = "EthernetSinkApp"
**.IED_{1..3}_C.app[0].display-name = "SV Sink"
**.IED_{1..3}_C.app[0].io.interface = "eth0"
**.IED_1_C.app[0].io.localAddress = "01:0C:CD:04:00:10"
**.IED_2_C.app[0].io.localAddress = "01:0C:CD:04:00:20"
**.IED_3_C.app[0].io.localAddress = "01:0C:CD:04:00:30"

**.IED_{1..3}_C.app[1].typename = "EthernetSourceApp"
**.IED_{1..3}_C.app[1].display-name = "goose_1b"
**.IED_{1..3}_C.app[1].io.interface = "eth0"
**.IED_{1..3}_C.app[1].source.packetLength = 134B #160B total
**.IED_{1..3}_C.app[1].source.productionInterval = 1s
**.IED_{1..3}_C.app[1].source.useGoose = true 
**.IED_{1..3}_C.app[1].source.numberOfGooseEventsPerSec = 200
**.IED_1_C.app[1].io.remoteAddress = "01:0C:CD:04:00:60"
**.IED_2_C.app[1].io.remoteAddress = "01:0C:CD:04:00:61"
**.IED_3_C.app[1].io.remoteAddress = "01:0C:CD:04:00:62"


**.IED_{1..3}_C.app[2].typename = "TcpSessionApp"
**.IED_{1..3}_C.app[2].display-name = "LOG"
**.IED_{1..3}_C.app[2].tClose = -1s
**.IED_{1..3}_C.app[2].active = true
**.IED_{1..3}_C.app[2].connectAddress = "log_server" 
**.IED_{1..3}_C.app[2].connectPort = 1150
**.IED_{1..3}_C.app[2].tOpen = 0s
**.IED_{1..3}_C.app[2].tSend = 0s
**.IED_{1..3}_C.app[2].sendBytes = 0B
**.IED_1_C.app[2].sendScript = "sendscriptLOG_7.txt"
**.IED_2_C.app[2].sendScript = "sendscriptLOG_8.txt"
**.IED_3_C.app[2].sendScript = "sendscriptLOG_9.txt"

**.MU_{1..3}_{A..B}.numApps = 4
**.MU_{1..3}_{A..B}.app[0].typename = "EthernetSourceApp"
**.MU_{1..3}_{A..B}.app[0].display-name = "SV"
**.MU_{1..3}_{A..B}.app[0].source.packetLength = 130B #140B total
**.MU_{1..3}_{A..B}.app[0].source.productionInterval = 1.0s/4000
**.MU_{1..3}_{A..B}.app[0].io.interface = "eth0"
**.MU_1_{A..B}.app[0].io.remoteAddress = "01:0C:CD:04:00:10"
**.MU_2_{A..B}.app[0].io.remoteAddress = "01:0C:CD:04:00:20"
**.MU_3_{A..B}.app[0].io.remoteAddress = "01:0C:CD:04:00:30"

**.MU_{1..3}_{A..B}.app[1].typename = "EthernetSinkApp"
**.MU_{1..3}_{A..B}.app[1].display-name = "GOOSE Sink 1A"
**.MU_{1..3}_{A..B}.app[1].io.interface = "eth0"
**.MU_1_{A..B}.app[1].io.localAddress = "01:0C:CD:04:00:50"
**.MU_2_{A..B}.app[1].io.localAddress = "01:0C:CD:04:00:51"
**.MU_3_{A..B}.app[1].io.localAddress = "01:0C:CD:04:00:52"

**.MU_{1..3}_{A..B}.app[2].typename = "EthernetSinkApp"
**.MU_{1..3}_{A..B}.app[2].display-name = "GOOSE Sink 1B"
**.MU_{1..3}_{A..B}.app[2].io.interface = "eth0"
**.MU_1_{A..B}.app[2].io.localAddress = "01:0C:CD:04:00:60"
**.MU_2_{A..B}.app[2].io.localAddress = "01:0C:CD:04:00:61"
**.MU_3_{A..B}.app[2].io.localAddress = "01:0C:CD:04:00:62"

**.MU_{1..3}_{A..B}.app[3].typename = "TcpSessionApp"
**.MU_{1..3}_{A..B}.app[3].display-name = "LOG"
**.MU_{1..3}_{A..B}.app[3].tClose = -1s
**.MU_{1..3}_{A..B}.app[3].active = true
**.MU_{1..3}_{A..B}.app[3].connectAddress = "log_server" 
**.MU_{1..3}_{A..B}.app[3].connectPort = 1150
**.MU_{1..3}_{A..B}.app[3].tOpen = 0s
**.MU_{1..3}_{A..B}.app[3].tSend = 0s
**.MU_{1..3}_{A..B}.app[3].sendBytes = 0B
**.MU_1_A.app[3].sendScript = "sendscriptLOG_10.txt"
**.MU_1_B.app[3].sendScript = "sendscriptLOG_11.txt"
**.MU_2_A.app[3].sendScript = "sendscriptLOG_12.txt"
**.MU_2_B.app[3].sendScript = "sendscriptLOG_13.txt"
**.MU_3_A.app[3].sendScript = "sendscriptLOG_14.txt"
**.MU_3_B.app[3].sendScript = "sendscriptLOG_15.txt"

#LOG SERVER SINK
**.log_server.numApps = 1
**.log_server.app[0].typename = "TcpSinkApp"
**.log_server.app[0].display-name = "Log Server Sink"
**.log_server.app[0].localPort = 1150

**.internet_host_{1..4}.numApps = 2
**.internet_host_{1..4}.app[0].typename = "TcpSessionApp"
**.internet_host_{1..4}.app[0].display-name = "Internet traffic"
**.internet_host_{1..4}.app[0].tClose = -1s
**.internet_host_{1..4}.app[0].active = true
**.internet_host_{1..4}.app[0].connectPort = 1150
**.internet_host_{1..4}.app[0].tOpen = 0s
**.internet_host_{1..4}.app[0].tSend = 0s
**.internet_host_{1..4}.app[0].sendBytes = 0B

**.internet_host_1.app[0].connectAddress = "internet_host_3" 
**.internet_host_1.app[0].sendScript = "sendscriptIT_1.txt"

**.internet_host_2.app[0].connectAddress = "internet_host_4" 
**.internet_host_2.app[0].sendScript = "sendscriptIT_2.txt"

**.internet_host_3.app[0].connectAddress = "internet_host_1" 
**.internet_host_3.app[0].sendScript = "sendscriptIT_3.txt"

**.internet_host_4.app[0].connectAddress = "internet_host_2" 
**.internet_host_4.app[0].sendScript = "sendscriptIT_4.txt"

**.internet_host_{1..4}.app[1].typename = "TcpSinkApp"
**.internet_host_{1..4}.app[1].localPort = 1150

# GOOSE Type 1/1A 	= 01-0C-CD-01-00-00 through 01-0C-CD-01-01-FF 
# SV 				= 01-0C-CD-04-00-00 through 01-0C-CD-04-01-FF 

**.switch_1.macTable.forwardingTable = [{address: "gPTPclock", interface: "eth0"}, \
										{address: "IED_1_A", interface: "eth1"}, \
										{address: "IED_1_B", interface: "eth2"}, \
										{address: "IED_1_C", interface: "eth3"}, \
										{address: "MU_1_A", interface: "eth4"}, \
										{address: "MU_1_B", interface: "eth5"}, \
										{address: "switch_2", interface: "eth6"}, \
										{address: "switch_3", interface: "eth7"}, \
										{address: "log_server", interface: "eth8"}, \
										{address: "internet_host_1", interface: "eth9"}, \
										{address: "internet_host_2", interface: "eth10"}, \
										{address: "internet_host_3", interface: "eth7"}, \
										{address: "internet_host_4", interface: "eth6"}, \
									    {address: "01:0C:CD:04:00:10", interface: "eth1"}, \
                    					{address: "01:0C:CD:04:00:10", interface: "eth2"}, \
										{address: "01:0C:CD:04:00:10", interface: "eth3"},  \
										{address: "01:0C:CD:04:00:50", interface: "eth4"}, \
										{address: "01:0C:CD:04:00:50", interface: "eth5"}, \
										{address: "01:0C:CD:04:00:60", interface: "eth4"}, \
										{address: "01:0C:CD:04:00:60", interface: "eth5"}]

**.switch_2.macTable.forwardingTable = [{address: "IED_2_A", interface: "eth0"}, \
										{address: "IED_2_B", interface: "eth1"}, \
										{address: "IED_2_C", interface: "eth2"}, \
										{address: "MU_2_A", interface: "eth3"}, \
										{address: "MU_2_B", interface: "eth4"}, \
										{address: "switch_1", interface: "eth5"}, \
										{address: "switch_3", interface: "eth6"}, \
										{address: "log_server", interface: "eth5"}, \
										{address: "internet_host_2", interface: "eth5"}, \
										{address: "internet_host_4", interface: "eth6"}, \
									  	{address: "01:0C:CD:04:00:20", interface: "eth0"}, \
                    					{address: "01:0C:CD:04:00:20", interface: "eth1"}, \
									  	{address: "01:0C:CD:04:00:20", interface: "eth2"}, \
										{address: "01:0C:CD:04:00:51", interface: "eth3"}, \
										{address: "01:0C:CD:04:00:51", interface: "eth4"}, \
										{address: "01:0C:CD:04:00:61", interface: "eth3"}, \
										{address: "01:0C:CD:04:00:61", interface: "eth4"}]

**.switch_3.macTable.forwardingTable = [{address: "IED_3_A", interface: "eth0"}, \
										{address: "IED_3_B", interface: "eth1"}, \
										{address: "IED_3_C", interface: "eth2"}, \
										{address: "MU_3_A", interface: "eth3"}, \
										{address: "MU_3_B", interface: "eth4"}, \
										{address: "switch_1", interface: "eth5"}, \
										{address: "switch_2", interface: "eth6"}, \
										{address: "log_server", interface: "eth5"}, \
										{address: "internet_host_1", interface: "eth5"}, \
										{address: "internet_host_2", interface: "eth6"}, \
										{address: "internet_host_3", interface: "eth7"}, \
										{address: "internet_host_4", interface: "eth8"}, \
									  	{address: "01:0C:CD:04:00:30", interface: "eth0"}, \
                    					{address: "01:0C:CD:04:00:30", interface: "eth1"}, \
									  	{address: "01:0C:CD:04:00:30", interface: "eth2"}, \
										{address: "01:0C:CD:04:00:52", interface: "eth3"}, \
										{address: "01:0C:CD:04:00:52", interface: "eth4"}, \
										{address: "01:0C:CD:04:00:62", interface: "eth3"}, \
										{address: "01:0C:CD:04:00:62", interface: "eth4"}]

*.switch*.hasEgressTrafficShaping = true
*.switch*.eth[*].macLayer.queue.*[0].display-name = "Best effort"
*.switch*.eth[*].macLayer.queue.*[1..2].display-name = "N/A"
*.switch*.eth[*].macLayer.queue.*[3].display-name = "MMS"
*.switch*.eth[*].macLayer.queue.*[4].display-name = "GPTP"
*.switch*.eth[*].macLayer.queue.*[5].display-name = "GOOSE 1B"
*.switch*.eth[*].macLayer.queue.*[6].display-name = "GOOSE 1A"
*.switch*.eth[*].macLayer.queue.*[7].display-name = "SV"
*.switch*.eth[*].macLayer.queue.classifier.typename = "ContentBasedClassifier"
*.switch*.eth[*].macLayer.queue.classifier.packetFilters = ["",
															"",
															"",
															expr(has(tcp) && tcp.destPort == 1112),
															expr(name =~ "Gptp*"),
															expr(name =~ "goose_1b*"),
															expr(name =~ "goose_1a*"),
															expr(name =~ "SV*")]

[Config ThreeBaysOverProvisioned]
network = ThreeBaysOverProvisioned
extends = ThreeBays
*.*.eth[*].bitrate = 100Mbps

[Config ThreeBaysUnderProvisioned]
network = ThreeBaysUnderProvisioned
extends = ThreeBays
*.*.eth[*].bitrate = 10Mbps

[Config ThreeBaysOverProvisionedWithTASandCBS]
network = ThreeBaysOverProvisioned
extends = ThreeBaysWithTASandCBS
*.*.eth[*].bitrate = 100Mbps

[Config ThreeBaysUnderProvisionedWithTASandCBS]
network = ThreeBaysUnderProvisioned
extends = ThreeBaysWithTASandCBS
*.*.eth[*].bitrate = 10Mbps

[Config ThreeBaysWithTASandCBS]
extends = ThreeBays

*.IED*.hasOutgoingStreams = true
*.MU*.hasOutgoingStreams = true

*.IED*.bridging.streamIdentifier.identifier.mapping = [{stream: "GOOSE_1A", packetFilter: expr(name =~ "goose_1a*")},
													   {stream: "GOOSE_1B", packetFilter: expr(name =~ "goose_1b*")},
                                                       {stream: "SV", packetFilter: expr(name =~ "SV*")},
                                                       {stream: "MMS", packetFilter: expr(has(tcp) && tcp.destPort == 1112)}]
#                                                       {stream: "time", packetFilter: expr(name =~ "Gptp*")}]

*.IED*.bridging.streamCoder.encoder.mapping = [{stream: "GOOSE_1A", pcp:6},
											   {stream: "GOOSE_1B", pcp:5},
											   {stream: "SV", pcp:7},
											   {stream: "MMS", pcp:3}]
# 											   {stream: "time", pcp:4}]

*.MU*.bridging.streamIdentifier.identifier.mapping = [{stream: "GOOSE_1A", packetFilter: expr(name =~ "goose_1a*")},
													   {stream: "GOOSE_1B", packetFilter: expr(name =~ "goose_1b*")},
                                                       {stream: "SV", packetFilter: expr(name =~ "SV*")},
                                                       {stream: "MMS", packetFilter: expr(has(tcp) && tcp.destPort == 1112)}]

*.MU*.bridging.streamCoder.encoder.mapping = [{stream: "GOOSE_1A", pcp:6},
											   {stream: "GOOSE_1B", pcp:5},
											   {stream: "SV", pcp:7},
											   {stream: "MMS", pcp:3}]


*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[5].typename = "Ieee8021qCreditBasedShaper"
*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[5].idleSlope = 60Mbps
*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[6].typename = "Ieee8021qCreditBasedShaper"
*.switch*.eth[*].macLayer.queue.transmissionSelectionAlgorithm[6].idleSlope = 60Mbps


#*.switch*.eth[*].macLayer.queue.hasGcl = true
#*.switch*.eth[*].macLayer.queue.gateControlList.numGates = 8
#*.switch*.eth[*].macLayer.queue.gateControlList.mapping = "01234567"
#*.switch*.eth[*].macLayer.queue.gateControlList.durations = [2ms, 2ms]
#*.switch*.eth[*].macLayer.queue.gateControlList.gateStates = ["01111111", "10000000"]





