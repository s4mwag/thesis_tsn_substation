[General]
sim-time-limit = 10s
seed-set = 12345 # SEED FOR RANDOM NUMBER GENERATOR USED FOR GOOSE MESSAGES

# all Ethernet interfaces have 100 Mbps speed
*.*.eth[*].bitrate = 100Mbps

[Config TimeSynchronization]
# enable time synchronization in all network nodes
*.*.hasTimeSynchronization = true

# IF YOU WANT TO SIMULATE CLOCK DRIFT, MODIFY THESE PARAMETERS
*.gPTPclock.clock.typename = "IdealClock"
*.*.clock.typename = "SettableClock"
#*.MU*.clock.typename = "SettableClock"
#*.switch*.clock.typename = "SettableClock"

*.*.clock.oscillator.typename = "RandomDriftOscillator"
**.oscillator.changeInterval = 12.5ms
**.oscillator.driftRate = uniform(-100ppm, 100ppm)
**.oscillator.driftRateChange = uniform(-1ppm, 1ppm)
**.oscillator.driftRateChangeUpperLimit = 100ppm
**.oscillator.driftRateChangeLowerLimit = -100ppm

#source applications and periodic gates use local clock
*.*.app[*].source.clockModule = "^.^.clock"
*.*.eth[*].macLayer.queue.transmissionGate[*].clockModule = "^.^.^.^.clock"
# make sure sync and pdelay messages don't occur at the same time
*.*.gptp.syncInitialOffset = 5ms
*.*.gptp.syncInterval = 31.25ms
*.*.gptp.pdelayInitialOffset = 0s
*.*.gptp.pdelayInterval = 1s


[Config gPTP_Example]
# Provides visuals for synchronization. Used for debugging purposes
description = "Clock synchronization info for debugging"
extends = IntegrationExampleSmall
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
#*.visualizer.infoVisualizer[*].displayInfos = true

# Set all reference clocks to master clock so the time difference can be visualized
**.referenceClock = "gPTPclock.clock"

# Synchronization difference visualization
*.visualizer.numInfoVisualizers = 4
*.visualizer.infoVisualizer[0].modules = "*.gPTPclock.clock"
*.visualizer.infoVisualizer[1].modules = "*.switch*.clock"
*.visualizer.infoVisualizer[2].modules = "*.IED*.clock"
*.visualizer.infoVisualizer[3].modules = "*.MU*.clock"
*.visualizer.infoVisualizer[*].placementHint = "left"
*.gPTPclock.clock.displayStringTextFormat = "time: %T"
*.switch*.clock.displayStringTextFormat = "diff: %d"
*.IED*.clock.displayStringTextFormat = "diff: %d"
*.MU*.clock.displayStringTextFormat = "diff: %d"

[Config MultiCast]
network = MultiCast
#GPTP CLOCK CONFIGURATION
*.gPTPclock.gptp.masterPorts = ["eth0"]
*.switch.gptp.slavePort = "eth0"
*.switch.gptp.masterPorts = [ "eth1", "eth2", "eth3","eth4"]
**.hasGlobalArp = true

**.IED_A.numApps = 2
**.IED_A.app[0].typename = "EthernetSinkApp"
**.IED_A.app[0].display-name = "SV Sink #1"
**.IED_A.app[0].io.localAddress = "01:0C:CD:04:00:20"
**.IED_A.app[0].io.interface = "eth0"

#IED_A MMS TO IED_B
**.IED_A.app[1].typename = "TcpClientApp"
**.IED_A.app[1].source.packetLength = 84B # Packet size is 150 B
**.IED_A.app[1].source.productionInterval = 1s/10
**.IED_A.app[1].source.packetNameFormat = "%M->MMS-%c"
**.IED_A.app[1].io.connectAddress = "IED_B"
**.IED_A.app[1].io.connectPort = 1112


**.IED_B.numApps = 2
#IED_B MMS SINK
**.IED_B.app[0].typename = "TcpSinkApp"
**.IED_B.app[0].display-name = "MMS Sink"
**.IED_B.app[0].io.interface = "eth0"
#**.IED_B.app[0].localAddress = "10.0.0.10"
**.IED_B.app[0].localPort = 1112

**.IED_B.app[1].typename = "EthernetSinkApp"
**.IED_B.app[1].display-name = "SV Sink #1"
**.IED_B.app[1].io.localAddress = "01:0C:CD:04:00:20"
**.IED_B.app[1].io.interface = "eth0"

**.IED_C.numApps = 1
**.IED_C.app[0].typename = "EthernetSinkApp"
**.IED_C.app[0].display-name = "SV Sink #1"
**.IED_C.app[0].io.localAddress = "01:0C:CD:04:00:30"
**.IED_C.app[0].io.interface = "eth0"

**.MU.numApps = 1
**.MU.app[0].typename = "EthernetSourceApp"
**.MU.app[0].display-name = "SV Source #1"
**.MU.app[0].source.packetLength = 84B
**.MU.app[0].source.productionInterval = 1.0s/40
**.MU.app[0].source.packetNameFormat = "%M-SV, Packet: %c, Event: %e"
**.MU.app[0].io.remoteAddress = "01:0C:CD:04:00:20"
**.MU.app[0].io.interface = "eth0"

# GOOSE Type 1/1A 	= 01-0C-CD-01-00-00 through 01-0C-CD-01-01-FF 
# SV 				= 01-0C-CD-04-00-00 through 01-0C-CD-04-01-FF 

**.switch.macTable.forwardingTable = [{address: "IED_A", interface: "eth0"}, \
										{address: "IED_B", interface: "eth1"}, \
										{address: "IED_C", interface: "eth2"}, \
										{address: "MU", interface: "eth3"}, \
									  	{address: "01:0C:CD:04:00:20", interface: "eth1"}, \
                                      	{address: "01:0C:CD:04:00:20", interface: "eth2"}, \
									  	{address: "01:0C:CD:04:00:30", interface: "eth3"}, \
										{address: "00:00:00:00:00:10", interface: "eth1"},]

[Config IntegrationExampleSmall]
network = IntegrationExampleSmall
extends = TimeSynchronization
#GPTP CLOCK CONFIGURATION
*.gPTPclock.gptp.masterPorts = ["eth0"]
*.switch.gptp.slavePort = "eth0"
*.switch.gptp.masterPorts = [ "eth1", "eth2", "eth3","eth4"]

**.hasGlobalArp = true

#IED_A MMS TO IED_B 
# Will send messages from a list generated in sendscript.txt, 150 Total Bytes per MMS packet
# Currently sends 8333 packets in 10 seconds which is ~1Mbps
# 8333 packets / 10 s * 150 B * 8 = 999 960 bps
**.IED_A.numApps = 3
**.IED_A.app[0].typename = "TcpSessionApp"
**.IED_A.app[0].display-name = "mms"
**.IED_A.app[0].tClose = -1s
**.IED_A.app[0].active = true
**.IED_A.app[0].connectAddress = "IED_B" 
**.IED_A.app[0].connectPort = 1112
**.IED_A.app[0].tOpen = 0s
**.IED_A.app[0].tSend = 0s
**.IED_A.app[0].sendBytes = 0B


#IED_A GOOSE TO MU
**.IED_A.app[1].typename = "EthernetSourceApp"
**.IED_A.app[1].display-name = "goose"
**.IED_A.app[1].io.interface = "eth0"
**.IED_A.app[1].io.remoteAddress = "MU"
**.IED_A.app[1].source.packetLength = 134B #160B total
**.IED_A.app[1].source.productionInterval = 1s
**.IED_A.app[1].source.useGoose = true 
**.IED_A.app[1].source.numberOfGooseEvents = 200 #20 * simulation time

#IED_A SV SINK
**.IED_A.app[2].typename = "EthernetSinkApp"
**.IED_A.app[2].display-name = "SV Sink #1"
**.IED_A.app[2].io.localAddress = "01:0C:CD:04:00:20"
**.IED_A.app[2].io.interface = "eth0"

#IED_B GOOSE TO MU
**.IED_B.numApps = 3
**.IED_B.app[0].typename = "EthernetSourceApp"
**.IED_B.app[0].display-name = "goose"
**.IED_B.app[0].io.interface = "eth0"
**.IED_B.app[0].io.remoteAddress = "MU"
**.IED_B.app[0].source.packetLength = 134B #160B total
**.IED_B.app[0].source.productionInterval = 1s
**.IED_B.app[0].source.useGoose = true 
**.IED_B.app[0].source.numberOfGooseEvents = 200 #20 * simulation time

#IED_B SV SINK
**.IED_B.app[1].typename = "EthernetSinkApp"
**.IED_B.app[1].display-name = "SV Sink #1"
**.IED_B.app[1].io.localAddress = "01:0C:CD:04:00:20"
**.IED_B.app[1].io.interface = "eth0"

#IED_B MMS SINK
**.IED_B.app[2].typename = "TcpSinkApp"
**.IED_B.app[2].display-name = "MMS Sink"
**.IED_B.app[2].localPort = 1112

#IED_C SV SINK
**.IED_C.numApps = 1
**.IED_C.app[0].typename = "EthernetSinkApp"
**.IED_C.app[0].display-name = "SV Sink #1"
**.IED_C.app[0].io.localAddress = "01:0C:CD:04:00:20"
**.IED_C.app[0].io.interface = "eth0"

#MU SV TO IED_A AND IED_B to show multicast
**.MU.numApps = 2
**.MU.app[0].typename = "EthernetSourceApp"
**.MU.app[0].display-name = "SV"
**.MU.app[0].source.packetLength = 130B #140B total
**.MU.app[0].source.productionInterval = 1.0s/4000
**.MU.app[0].io.remoteAddress = "01:0C:CD:04:00:20"
**.MU.app[0].io.interface = "eth0"

#MU GOOSE SINK
**.MU.app[1].typename = "EthernetSinkApp"
**.MU.app[1].display-name = "GOOSE Sink #1"
**.MU.app[1].io.interface = "eth0"
**.MU.app[1].io.localAddress = "MU"

# GOOSE Type 1/1A 	= 01-0C-CD-01-00-00 through 01-0C-CD-01-01-FF 
# SV 				= 01-0C-CD-04-00-00 through 01-0C-CD-04-01-FF 

**.switch.macTable.forwardingTable = [	{address: "gPTPclock", interface: "eth0"}, \
										{address: "IED_A", interface: "eth1"}, \
										{address: "IED_B", interface: "eth2"}, \
										{address: "IED_C", interface: "eth3"}, \
										{address: "MU", interface: "eth4"}, \
									  	{address: "01:0C:CD:04:00:20", interface: "eth1"}, \
                                      	{address: "01:0C:CD:04:00:20", interface: "eth2"}, \
									  	{address: "01:0C:CD:04:00:20", interface: "eth3"}]

[Config ThreeBays]
network = ThreeBays
extends = TimeSynchronization

#GPTP CLOCK CONFIGURATION
*.gPTPclock.gptp.masterPorts = ["eth0"]
*.switch_1.gptp.slavePort = "eth0"
*.switch_2.gptp.slavePort = "eth4"
*.switch_3.gptp.slavePort = "eth4"

*.switch_1.gptp.masterPorts = ["eth1", "eth2", "eth3","eth4","eth5","eth6"]
*.switch_2.gptp.masterPorts = ["eth0","eth1", "eth2", "eth3"]
*.switch_3.gptp.masterPorts = ["eth0","eth1", "eth2", "eth3"]

**.hasGlobalArp = true

#IED_1_A MMS TO IED_1_B 
# Will send messages from a list generated in sendscript.txt, 150 Total Bytes per MMS packet
# Currently sends 8333 packets in 10 seconds which is ~1Mbps
# 8333 packets / 10 s * 150 B * 8 = 999 960 bps
**.IED_1_A.numApps = 3
**.IED_1_A.app[0].typename = "TcpSessionApp"
**.IED_1_A.app[0].display-name = "mms"
**.IED_1_A.app[0].tClose = -1s
**.IED_1_A.app[0].active = true
**.IED_1_A.app[0].connectAddress = "IED_1_B" 
**.IED_1_A.app[0].connectPort = 1112
**.IED_1_A.app[0].tOpen = 0s
**.IED_1_A.app[0].tSend = 0s
**.IED_1_A.app[0].sendBytes = 0B

#IED_1_A GOOSE TO MU_1
**.IED_1_A.app[1].typename = "EthernetSourceApp"
**.IED_1_A.app[1].display-name = "goose"
**.IED_1_A.app[1].io.interface = "eth0"
**.IED_1_A.app[1].io.remoteAddress = "MU_1"
**.IED_1_A.app[1].source.packetLength = 134B #160B total
**.IED_1_A.app[1].source.productionInterval = 1s
**.IED_1_A.app[1].source.useGoose = true 
**.IED_1_A.app[1].source.numberOfGooseEvents = 200 #20 * simulation time

#IED_1_A SV SINK
**.IED_1_A.app[2].typename = "EthernetSinkApp"
**.IED_1_A.app[2].display-name = "SV Sink #1"
**.IED_1_A.app[2].io.localAddress = "01:0C:CD:04:00:10"
**.IED_1_A.app[2].io.interface = "eth0"

#IED_1_B GOOSE TO MU_1
**.IED_1_B.numApps = 3
**.IED_1_B.app[0].typename = "EthernetSourceApp"
**.IED_1_B.app[0].display-name = "goose"
**.IED_1_B.app[0].io.interface = "eth0"
**.IED_1_B.app[0].io.remoteAddress = "MU_1"
**.IED_1_B.app[0].source.packetLength = 134B #160B total
**.IED_1_B.app[0].source.productionInterval = 1s
**.IED_1_B.app[0].source.useGoose = true 
**.IED_1_B.app[0].source.numberOfGooseEvents = 200 #20 * simulation time

#IED_1_B SV SINK
**.IED_1_B.app[1].typename = "EthernetSinkApp"
**.IED_1_B.app[1].display-name = "SV Sink #1"
**.IED_1_B.app[1].io.localAddress = "01:0C:CD:04:00:10"
**.IED_1_B.app[1].io.interface = "eth0"

#IED_1_B MMS SINK
**.IED_1_B.app[2].typename = "TcpSinkApp"
**.IED_1_B.app[2].display-name = "MMS Sink"
**.IED_1_B.app[2].localPort = 1112

#IED_1_C SV SINK
**.IED_1_C.numApps = 1
**.IED_1_C.app[0].typename = "EthernetSinkApp"
**.IED_1_C.app[0].display-name = "SV Sink #1"
**.IED_1_C.app[0].io.localAddress = "01:0C:CD:04:00:10"
**.IED_1_C.app[0].io.interface = "eth0"

#MU_1 SV TO IEDs
**.MU_1.numApps = 2
**.MU_1.app[0].typename = "EthernetSourceApp"
**.MU_1.app[0].display-name = "SV"
**.MU_1.app[0].source.packetLength = 130B #140B total
**.MU_1.app[0].source.productionInterval = 1.0s/4000
**.MU_1.app[0].io.remoteAddress = "01:0C:CD:04:00:10"
**.MU_1.app[0].io.interface = "eth0"

#MU_1 GOOSE SINK
**.MU_1.app[1].typename = "EthernetSinkApp"
**.MU_1.app[1].display-name = "GOOSE Sink #1"
**.MU_1.app[1].io.interface = "eth0"
**.MU_1.app[1].io.localAddress = "MU_1"
										
**.IED_2_A.numApps = 3
**.IED_2_A.app[0].typename = "TcpSessionApp"
**.IED_2_A.app[0].display-name = "mms"
**.IED_2_A.app[0].tClose = -1s
**.IED_2_A.app[0].active = true
**.IED_2_A.app[0].connectAddress = "IED_2_B" 
**.IED_2_A.app[0].connectPort = 1112
**.IED_2_A.app[0].tOpen = 0s
**.IED_2_A.app[0].tSend = 0s
**.IED_2_A.app[0].sendBytes = 0B

#IED_2_A GOOSE TO MU_2
**.IED_2_A.app[1].typename = "EthernetSourceApp"
**.IED_2_A.app[1].display-name = "goose"
**.IED_2_A.app[1].io.interface = "eth0"
**.IED_2_A.app[1].io.remoteAddress = "MU_2"
**.IED_2_A.app[1].source.packetLength = 134B #160B total
**.IED_2_A.app[1].source.productionInterval = 1s
**.IED_2_A.app[1].source.useGoose = true 
**.IED_2_A.app[1].source.numberOfGooseEvents = 200 #20 * simulation time

#IED_2_A SV SINK
**.IED_2_A.app[2].typename = "EthernetSinkApp"
**.IED_2_A.app[2].display-name = "SV Sink #1"
**.IED_2_A.app[2].io.localAddress = "01:0C:CD:04:00:20"
**.IED_2_A.app[2].io.interface = "eth0"

#IED_B_2 GOOSE TO MU_2
**.IED_2_B.numApps = 3
**.IED_2_B.app[0].typename = "EthernetSourceApp"
**.IED_2_B.app[0].display-name = "goose"
**.IED_2_B.app[0].io.interface = "eth0"
**.IED_2_B.app[0].io.remoteAddress = "MU_2"
**.IED_2_B.app[0].source.packetLength = 134B #160B total
**.IED_2_B.app[0].source.productionInterval = 1s
**.IED_2_B.app[0].source.useGoose = true 
**.IED_2_B.app[0].source.numberOfGooseEvents = 200 #20 * simulation time

#IED_2_B SV SINK
**.IED_2_B.app[1].typename = "EthernetSinkApp"
**.IED_2_B.app[1].display-name = "SV Sink #1"
**.IED_2_B.app[1].io.localAddress = "01:0C:CD:04:00:20"
**.IED_2_B.app[1].io.interface = "eth0"

#IED_2_B MMS SINK
**.IED_2_B.app[2].typename = "TcpSinkApp"
**.IED_2_B.app[2].display-name = "MMS Sink"
**.IED_2_B.app[2].localPort = 1112

#IED_2_C SV SINK
**.IED_2_C.numApps = 1
**.IED_2_C.app[0].typename = "EthernetSinkApp"
**.IED_2_C.app[0].display-name = "SV Sink #1"
**.IED_2_C.app[0].io.localAddress = "01:0C:CD:04:00:20"
**.IED_2_C.app[0].io.interface = "eth0"

#MU_2 SV TO IEDs
**.MU_2.numApps = 2
**.MU_2.app[0].typename = "EthernetSourceApp"
**.MU_2.app[0].display-name = "SV"
**.MU_2.app[0].source.packetLength = 130B #140B total
**.MU_2.app[0].source.productionInterval = 1.0s/4000
**.MU_2.app[0].io.remoteAddress = "01:0C:CD:04:00:20"
**.MU_2.app[0].io.interface = "eth0"

#MU_2 GOOSE SINK
**.MU_2.app[1].typename = "EthernetSinkApp"
**.MU_2.app[1].display-name = "GOOSE Sink #1"
**.MU_2.app[1].io.interface = "eth0"
**.MU_2.app[1].io.localAddress = "MU_2"
										
**.IED_3_A.numApps = 3
**.IED_3_A.app[0].typename = "TcpSessionApp"
**.IED_3_A.app[0].display-name = "mms"
**.IED_3_A.app[0].tClose = -1s
**.IED_3_A.app[0].active = true
**.IED_3_A.app[0].connectAddress = "IED_3_B" 
**.IED_3_A.app[0].connectPort = 1112
**.IED_3_A.app[0].tOpen = 0s
**.IED_3_A.app[0].tSend = 0s
**.IED_3_A.app[0].sendBytes = 0B

#IED_3_A GOOSE TO MU_3
**.IED_3_A.app[1].typename = "EthernetSourceApp"
**.IED_3_A.app[1].display-name = "goose"
**.IED_3_A.app[1].io.interface = "eth0"
**.IED_3_A.app[1].io.remoteAddress = "MU_3"
**.IED_3_A.app[1].source.packetLength = 134B #160B total
**.IED_3_A.app[1].source.productionInterval = 1s
**.IED_3_A.app[1].source.useGoose = true 
**.IED_3_A.app[1].source.numberOfGooseEvents = 200 #20 * simulation time

#IED_3_A SV SINK
**.IED_3_A.app[2].typename = "EthernetSinkApp"
**.IED_3_A.app[2].display-name = "SV Sink #1"
**.IED_3_A.app[2].io.localAddress = "01:0C:CD:04:00:20"
**.IED_3_A.app[2].io.interface = "eth0"

#IED_3_B GOOSE TO MU_3
**.IED_3_B.numApps = 3
**.IED_3_B.app[0].typename = "EthernetSourceApp"
**.IED_3_B.app[0].display-name = "goose"
**.IED_3_B.app[0].io.interface = "eth0"
**.IED_3_B.app[0].io.remoteAddress = "MU_3"
**.IED_3_B.app[0].source.packetLength = 134B #160B total
**.IED_3_B.app[0].source.productionInterval = 1s
**.IED_3_B.app[0].source.useGoose = true 
**.IED_3_B.app[0].source.numberOfGooseEvents = 200 #20 * simulation time

#IED_3_B SV SINK
**.IED_3_B.app[1].typename = "EthernetSinkApp"
**.IED_3_B.app[1].display-name = "SV Sink #1"
**.IED_3_B.app[1].io.localAddress = "01:0C:CD:04:00:30"
**.IED_3_B.app[1].io.interface = "eth0"

#IED_3_B MMS SINK
**.IED_3_B.app[2].typename = "TcpSinkApp"
**.IED_3_B.app[2].display-name = "MMS Sink"
**.IED_3_B.app[2].localPort = 1112

#IED_3_C SV SINK
**.IED_3_C.numApps = 1
**.IED_3_C.app[0].typename = "EthernetSinkApp"
**.IED_3_C.app[0].display-name = "SV Sink #1"
**.IED_3_C.app[0].io.localAddress = "01:0C:CD:04:00:30"
**.IED_3_C.app[0].io.interface = "eth0"

#MU_3 SV TO IEDs
**.MU_3.numApps = 2
**.MU_3.app[0].typename = "EthernetSourceApp"
**.MU_3.app[0].display-name = "SV"
**.MU_3.app[0].source.packetLength = 130B #140B total
**.MU_3.app[0].source.productionInterval = 1.0s/4000
**.MU_3.app[0].io.remoteAddress = "01:0C:CD:04:00:30"
**.MU_3.app[0].io.interface = "eth0"

#MU_3 GOOSE SINK
**.MU_3.app[1].typename = "EthernetSinkApp"
**.MU_3.app[1].display-name = "GOOSE Sink #1"
**.MU_3.app[1].io.interface = "eth0"
**.MU_3.app[1].io.localAddress = "MU_3"

# GOOSE Type 1/1A 	= 01-0C-CD-01-00-00 through 01-0C-CD-01-01-FF 
# SV 				= 01-0C-CD-04-00-00 through 01-0C-CD-04-01-FF 

**.switch_1.macTable.forwardingTable = [ {address: "gPTPclock", interface: "eth0"}, \
										{address: "IED_1_A", interface: "eth1"}, \
										{address: "IED_1_B", interface: "eth2"}, \
										{address: "IED_1_C", interface: "eth3"}, \
										{address: "MU_1", interface: "eth4"}, \
										{address: "switch_2", interface: "eth5"}, \
										{address: "switch_3", interface: "eth6"}, \
									  	{address: "01:0C:CD:04:00:10", interface: "eth1"}, \
                                      	{address: "01:0C:CD:04:00:10", interface: "eth2"}, \
									  	{address: "01:0C:CD:04:00:10", interface: "eth3"}]

**.switch_2.macTable.forwardingTable = [	{address: "IED_2_A", interface: "eth0"}, \
										{address: "IED_2_B", interface: "eth1"}, \
										{address: "IED_2_C", interface: "eth2"}, \
										{address: "MU_2", interface: "eth3"}, \
										{address: "switch_1", interface: "eth4"}, \
										{address: "switch_3", interface: "eth5"}, \
									  	{address: "01:0C:CD:04:00:20", interface: "eth0"}, \
                                      	{address: "01:0C:CD:04:00:20", interface: "eth1"}, \
									  	{address: "01:0C:CD:04:00:20", interface: "eth2"}]

**.switch_3.macTable.forwardingTable = [	{address: "IED_3_A", interface: "eth0"}, \
										{address: "IED_3_B", interface: "eth1"}, \
										{address: "IED_3_C", interface: "eth2"}, \
										{address: "MU_3", interface: "eth3"}, \
										{address: "switch_1", interface: "eth4"}, \
										{address: "switch_2", interface: "eth5"}, \
									  	{address: "01:0C:CD:04:00:30", interface: "eth0"}, \
                                      	{address: "01:0C:CD:04:00:30", interface: "eth1"}, \
									  	{address: "01:0C:CD:04:00:30", interface: "eth2"}]


[Config IntegrationExampleSmallWithTAS]
extends = IntegrationExampleSmall
# enable outgoing streams
*.IED*.hasOutgoingStreams = true
*.MU*.hasOutgoingStreams = true

# enable egress traffic shaping
*.switch.hasEgressTrafficShaping = true

*.IED*.bridging.streamIdentifier.identifier.mapping = [{stream: "GOOSE", packetFilter: expr(name =~ "goose*")},
                                                       {stream: "SV", packetFilter: expr(name =~ "SV*")},
                                                       {stream: "MMS", packetFilter: expr(has(tcp))}]
#                                                       {stream: "time", packetFilter: expr(name =~ "Gptp*")}]

*.IED*.bridging.streamCoder.encoder.mapping = [{stream: "GOOSE", pcp:6},
											   {stream: "SV", pcp:7},
											   {stream: "MMS", pcp:3}]
# 											   {stream: "time", pcp:4}]

*.MU*.bridging.streamIdentifier.identifier.mapping = [{stream: "GOOSE", packetFilter: expr(name =~ "goose*")},
                                                       {stream: "SV", packetFilter: expr(name =~ "SV*")},
                                                       {stream: "MMS", packetFilter: expr(has(tcp))}]

*.MU*.bridging.streamCoder.encoder.mapping = [{stream: "GOOSE", pcp:6},
											   {stream: "SV", pcp:7},
											   {stream: "MMS", pcp:3}]

*.switch.eth[*].macLayer.queue.*[4].display-name = "GPTP"
*.switch.eth[*].macLayer.queue.*[3].display-name = "MMS"
*.switch.eth[*].macLayer.queue.*[6].display-name = "GOOSE"
*.switch.eth[*].macLayer.queue.*[7].display-name = "SV"

#*.switch.eth[*].macLayer.queue.transmissionGate[*].initiallyOpen = false
#*.switch.eth[*].macLayer.queue.transmissionGate[0].offset = 0ms
#*.switch.eth[*].macLayer.queue.transmissionGate[*].durations = [2ms, 6ms] # period is 10
#*.switch.eth[*].macLayer.queue.transmissionGate[1].offset = 6ms
#*.switch.eth[*].macLayer.queue.transmissionGate[1].durations = [2ms, 8ms]

#*.switch.eth[*].macLayer.queue.transmissionGate[0..2].initiallyOpen = false
#*.switch.eth[*].macLayer.queue.transmissionGate[5].initiallyOpen = false

*.switch*.eth[*].macLayer.queue.classifier.typename = "ContentBasedClassifier"
*.switch*.eth[*].macLayer.queue.classifier.packetFilters = ["",
															"",
															"",
															expr(has(tcp)),
															expr(name =~ "Gptp*"),
															"",
															expr(name =~ "goose*"),
															expr(name =~ "SV*")]
*.switch*.eth[*].macLayer.queue.queue[*].typename = "DropTailQueue"
*.switch*.eth[*].macLayer.queue.queue.dataCapacity = 32000B